// Browser Prefix
// Usage: @include css3-prefix('border-radius', $value);
@mixin css3-prefix($property, $value) {
	-webkit-#{$property}: #{$value};
	-moz-#{$property}: #{$value};
	-ms-#{$property}: #{$value};
	-o-#{$property}: #{$value};
	#{$property}: #{$value};
}

// Clearfix
// Usage: @include clearfix;
@mixin clearfix {
    &:before,
    &:after {
        content: "";
        display: table;
    }
    &:after {
        clear: both;
    }
    *zoom: 1;
}

// Breakpoints
// Usage: @include breakpoint(tablet) {}

$phone: 360px;
$phablet: 480px;
$tablet: 768px;
$tablet-landscape: 1024px;
$desktop: 1200px;

@mixin breakpoint($class) {

    @if $class == phone {
        @media (max-width: $phone) { @content; }
    }

    @else if $class == phablet {
        @media (max-width: $phablet) { @content; }
    }

    @else if $class == tablet {
        @media (max-width: $tablet) { @content; }
    }

    @else if $class == tablet-landscape {
        @media (max-width: $tablet-landscape) { @content; }
    }

    @else if $class == desktop {
        @media (max-width: $desktop) { @content; }

    }

    @else if $class == xl-desktop {
        @media (min-width: $desktop + 1) { @content; }
    }

}

// Border Radius
// Usage: @include border-radius(5px);
@mixin border-radius($value) {
    @include css3-prefix('border-radius', $value);
}

// Box Sizing
// Usage: @include box-sizing(border-box);
@mixin box-sizing($value) {
    @include css3-prefix('box-sizing', $value);
}

// Box Shadow
// @include box-shadow(10px, 10px, 5px, 0px, rgba(0,0,0,.5);
@mixin box-shadow($x, $y, $b, $s, $color ) {
    @include css3-prefix('box-shadow', $x $y $b $s $color);
}

// Background Image
// Usage: @include background-image(image, png, 100px, 100px, center, no-repeat);

$image-path: '../img/';
// Note: you need 'css3-prefix' mixin

@mixin background-image($file, $type, $width, $height, $position, $repeat) {

	background-image: url($image-path + $file + '.' + $type);
	background-position: $position;
	background-repeat: $repeat;
	@include css3-prefix('background-size', $width $height);

	@media only screen and (-webkit-min-device-pixel-ratio: 2),
	    only screen and (-moz-min-device-pixel-ratio: 2),
	    only screen and (-o-min-device-pixel-ratio: 2/1),
	    only screen and (min-device-pixel-ratio: 2),
	    only screen and (min-resolution: 192dpi),
	    only screen and (min-resolution: 2dppx){
	    & {
			background-image: url($image-path + $file + '-2x.' + $type);
			@include css3-prefix('background-size', $width $height);
	    }
	}
}

// Responsive Image
// Usage: @include responsive-img;
@mixin responsive-img {
    display: block;
    height: auto;
    max-width: 100%;
    min-width: 100%;
}

// Opacity
// Usage: @include opacity(0.8);
@mixin opacity($value) {
    $IEValue: $value * 100;
    opacity: $value;
    filter: alpha(opacity=$IEValue);
}

// Text Shadow
// Usage: @include text-shadow(2px, 2px, 5px, #000);
@mixin text-shadow($x, $y, $blur, $color) {
    text-shadow: $x $y $blur $color;
}

// Truncate Text
// Usage: @include text-truncate;
@mixin text-truncate {
    display: inline-block;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

// Transitions
// Usage: @include transition(all 0.2s linear);
@mixin transition($value) {
    @include css3-prefix('transition', $value);
}

// Vertical Alignment
// Usage: @include vertical-align;
@mixin vertical-align {
    position: relative;
    top: 50%;
    @include css3-prefix('transform', translateY(-50%));
}

// Reset Vertical Alignment
// @include reset-vertical-align;
@mixin reset-vertical-align {
    top: auto;
    @include css3-prefix('transform', none);
}

// Gradient Background
// Usage: @include linearGradient(left, right, start-percent, end-percent, #cccccc, #666666);
@mixin linearGradient($start, $end, $start-percent, $end-percent, $color1, $color2) {

    @if $start == 'top' { $type: 0; }
    @else if $start == 'left' { $type: 1; }

    background: $color1;
    background: -moz-linear-gradient($start, $color1 $start-percent, $color2 $end-percent);
    background: -webkit-linear-gradient($start, $color1 $start-percent, $color2 $end-percent);
    background: -o-linear-gradient($start, $color1 $start-percent, $color2 $end-percent);
    background: -ms-linear-gradient($start, $color1 $start-percent, $color2 $end-percent);
    background: linear-gradient(to $end, $color1 $start-percent, $color2 $end-percent);
    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#{$color1}', endColorstr='#{$color2}',GradientType=#{$type} );
}

// Display Flexbox
// @include flex;
@mixin flex {
    display: -webkit-box;
    display: -webkit-flex;
    display: -moz-box;
    display: -ms-flexbox;
    display: flex
}

// Reset list
// @include list-reset;
@mixin list-reset {
	list-style: none;
	margin: 0;
	padding: 0
}